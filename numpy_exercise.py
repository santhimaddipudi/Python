# -*- coding: utf-8 -*-
"""Numpy_exercise.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10dJ_HfILijC9RZdOKIMlkKyhj1M45QjR
"""

#show numpyt version number
import numpy
numpy.__version__

import numpy as np
a1=np.array([0,1,2,3,4,5,6,7,8,9])
print(a1)
print(a1[a1%2==1])#print odd numbers
a1[a1%2==0]

a2=np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
a2[a2%2==1] = -1
print(a2)

#without affecting the original array change the numpy array
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
arr_mod=arr
arr_mod[arr_mod%2==1]=-1
print(arr)
print(arr_mod)

#reshape numpy arrays
a=np.arange(10)
print(a)
a.reshape(2,5)

#stack 2 arrays vertically,horizontally etc
a = np.arange(10).reshape(2,-1)
b = np.repeat(1, 10).reshape(2,-1)
print("vertical stacking -vstack:\n",np.vstack((a,b)))
print("Stack arrays horizontally-hstack:\n",np.hstack((a,b)))
print("Stack arrays in sequence depth wise -dstack(along third axis):\n",np.dstack((a,b)))
print("Join a sequence of arrays along a new axis -stack:\n",np.stack((a,b)))

#generate custom sequences using existing array
a = np.array([1,2,3])
print(np.repeat(a,2))#repeat will repeat each element in array
print(np.tile(a,4))#tile will repeat entire array
np.r_[np.repeat(a, 3), np.tile(a, 3)]

#find common elements
a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])
print(np.intersect1d(a,b))
#From array a remove all items present in array b
print(np.setdiff1d(a,b))
#Get the positions where elements of a and b match
print(np.where(a == b))

#Get all items between 5 and 10 from a
a = np.array([2, 6, 1, 9, 10, 3, 27])
print(a[(a>=5)&(a<=10)])

#python function that handles scalars to work on numpy arrays
def maxx(x, y):
    """Get the maximum of two items"""
    if x >= y:
        return x
    else:
        return y
#print(max(4,10))
def pair_max(x, y):
    # here I am using map to make tuple from a and b, other solution is using zip(a,b)
    #maximum = [maxx(a,b) for a,b in map(lambda a,b:(a,b),x,y)]
    maximum = [maxx(a,b) for a,b in zip(x,y)]
    return np.array(maximum)

a = np.array([5, 7, 9, 8, 6, 4, 5])
b = np.array([6, 3, 4, 8, 9, 7, 1])
pair_max(a,b)

#How to swap two columns in a 2d numpy array

arr = np.arange(9).reshape(3,3)

print('Original array:')
print(arr)


print("\nModified array:")
arr[:, [1,0,2]] #col1,col0,col2
#arr[:, [0,0,2]] #col0,col0,col2

#reverse the rows of a 2D array
arr1 = np.arange(9).reshape(3,3)
print("original array:\n",arr1)
print("modified array:\n",arr1[[2,1,0],:])
#print(arr1[::-1, :])--same as above

#How to reverse the columns of a 2D array
arr1 = np.arange(12).reshape(3,4)
print("original array:\n",arr1)
print("Modified array:\n",arr1[:,::-1])

#create a 2D array containing random floats between 5 and 10
rand_arr = np.random.uniform(5,10, size=(3,3))
rand_arr

#Print or show only 2 decimal places
rand_arr = np.random.random((5,3))
np.set_printoptions(precision=2)
rand_arr

#Pretty print rand_arr by suppressing the scientific notation
rand_arr = np.random.random([4,4])/1e3
print(rand_arr)
np.set_printoptions(suppress=False)
print(rand_arr)
np.set_printoptions(suppress=True)
print(rand_arr)

#Limit the number of items printed in array
b = np.arange(12)
print("original:\n",b)
np.set_printoptions(threshold=6)
b

#Print the full numpy array a without truncating
a = np.arange(15)


np.set_printoptions(threshold=15)
a

# Import the  dataset keeping the text intact.
weather_data = np.genfromtxt('/content/sample_data/weather.csv', delimiter=',', skip_header=1,
                          usecols = [0,1,2,3], dtype = object)
weather_data

#extract a particular column from 1D array of tuples
weather_data = np.genfromtxt('/content/sample_data/weather.csv', delimiter=',', skip_header=1,
                          usecols = [-1], dtype = object)
print(weather_data)#last column
weather_data = np.genfromtxt('/content/sample_data/weather.csv', delimiter=',', skip_header=1,
                          usecols = [2], dtype = object)
print(weather_data)#last column

#Convert the 1D array to 2D array  by omitting the species text field.
emp_data = np.genfromtxt('/content/sample_data/employees.csv', delimiter=',', skip_header=1, dtype='float', usecols=[0,1,2])
emp_data

a=np.arange(10)
print("a:\n",a)
print("mean of a:\n",np.mean(a))
print("median of a:\n",np.median(a))
print("standard deviation of a:\n",np.std(a))